// Code generated by msgpackgen. DO NOT EDIT.
// Thank you for using and generating.

package tst

import (
	"fmt"
	tst "github.com/shamaton/msgpackgen/internal/tst/tst"
	msgpack "github.com/shamaton/msgpackgen/msgpack"
	dec "github.com/shamaton/msgpackgen/msgpack/dec"
	enc "github.com/shamaton/msgpackgen/msgpack/enc"
)

// RegisterGeneratedResolver registers generated resolver.
func RegisterGeneratedResolver() {
	msgpack.SetResolver(___encodeAsMap, ___encodeAsArray, ___decodeAsMap, ___decodeAsArray)
}

// decode
func ___decode(data []byte, i interface{}) (bool, error) {
	if msgpack.StructAsArray() {
		return ___decodeAsArray(data, i)
	} else {
		return ___decodeAsMap(data, i)
	}
}

// decodeAsArray
func ___decodeAsArray(data []byte, i interface{}) (bool, error) {
	switch v := i.(type) {
	case *A:
		_, err := ___decodeArrayA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v, dec.NewDecoder(data), 0)
		return true, err
	case **A:
		_, err := ___decodeArrayA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(*v, dec.NewDecoder(data), 0)
		return true, err
	case *tst.B:
		_, err := ___decodeArrayB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v, dec.NewDecoder(data), 0)
		return true, err
	case **tst.B:
		_, err := ___decodeArrayB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(*v, dec.NewDecoder(data), 0)
		return true, err
	}
	return false, nil
}

// decodeAsMap
func ___decodeAsMap(data []byte, i interface{}) (bool, error) {
	switch v := i.(type) {
	case *A:
		_, err := ___decodeMapA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v, dec.NewDecoder(data), 0)
		return true, err
	case **A:
		_, err := ___decodeMapA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(*v, dec.NewDecoder(data), 0)
		return true, err
	case *tst.B:
		_, err := ___decodeMapB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v, dec.NewDecoder(data), 0)
		return true, err
	case **tst.B:
		_, err := ___decodeMapB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(*v, dec.NewDecoder(data), 0)
		return true, err
	}
	return false, nil
}

// encode
func ___encode(i interface{}) ([]byte, error) {
	if msgpack.StructAsArray() {
		return ___encodeAsArray(i)
	} else {
		return ___encodeAsMap(i)
	}
}

// encodeAsArray
func ___encodeAsArray(i interface{}) ([]byte, error) {
	switch v := i.(type) {
	case A:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v, encoder, 0)
		if err != nil {
			encoder.ReleaseBytes()
			return nil, err
		}
		if size != offset {
			encoder.ReleaseBytes()
			return nil, fmt.Errorf("%s size / offset different %d : %d", "A", size, offset)
		}
		encoder.ReleaseBytes()
		return b, err
	case *A:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(*v, encoder, 0)
		if err != nil {
			encoder.ReleaseBytes()
			return nil, err
		}
		if size != offset {
			encoder.ReleaseBytes()
			return nil, fmt.Errorf("%s size / offset different %d : %d", "A", size, offset)
		}
		encoder.ReleaseBytes()
		return b, err
	case tst.B:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v, encoder, 0)
		if err != nil {
			encoder.ReleaseBytes()
			return nil, err
		}
		if size != offset {
			encoder.ReleaseBytes()
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/shamaton/msgpackgen/internal/tst/tst.B", size, offset)
		}
		encoder.ReleaseBytes()
		return b, err
	case *tst.B:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(*v, encoder, 0)
		if err != nil {
			encoder.ReleaseBytes()
			return nil, err
		}
		if size != offset {
			encoder.ReleaseBytes()
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/shamaton/msgpackgen/internal/tst/tst.B", size, offset)
		}
		encoder.ReleaseBytes()
		return b, err
	}
	return nil, nil
}

// encodeAsMap
func ___encodeAsMap(i interface{}) ([]byte, error) {
	switch v := i.(type) {
	case A:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v, encoder, 0)
		if err != nil {
			encoder.ReleaseBytes()
			return nil, err
		}
		if size != offset {
			encoder.ReleaseBytes()
			return nil, fmt.Errorf("%s size / offset different %d : %d", "A", size, offset)
		}
		encoder.ReleaseBytes()
		return b, err
	case *A:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(*v, encoder, 0)
		if err != nil {
			encoder.ReleaseBytes()
			return nil, err
		}
		if size != offset {
			encoder.ReleaseBytes()
			return nil, fmt.Errorf("%s size / offset different %d : %d", "A", size, offset)
		}
		encoder.ReleaseBytes()
		return b, err
	case tst.B:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v, encoder, 0)
		if err != nil {
			encoder.ReleaseBytes()
			return nil, err
		}
		if size != offset {
			encoder.ReleaseBytes()
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/shamaton/msgpackgen/internal/tst/tst.B", size, offset)
		}
		encoder.ReleaseBytes()
		return b, err
	case *tst.B:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(*v, encoder, 0)
		if err != nil {
			encoder.ReleaseBytes()
			return nil, err
		}
		if size != offset {
			encoder.ReleaseBytes()
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/shamaton/msgpackgen/internal/tst/tst.B", size, offset)
		}
		encoder.ReleaseBytes()
		return b, err
	}
	return nil, nil
}

// calculate size from github.com/shamaton/msgpackgen/internal/tst.A
func ___calcArraySizeA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v A, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(3)
	size += encoder.CalcInt(v.Int)
	size += encoder.CalcUint(v.Uint)
	sizeB, err := ___calcArraySizeB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v.B, encoder)
	if err != nil {
		return 0, err
	}
	size += sizeB
	return size, nil
}

// calculate size from github.com/shamaton/msgpackgen/internal/tst.A
func ___calcMapSizeA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v A, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(3)
	size += encoder.CalcStringFix(3)
	size += encoder.CalcInt(v.Int)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcUint(v.Uint)
	size += encoder.CalcStringFix(1)
	sizeB, err := ___calcMapSizeB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v.B, encoder)
	if err != nil {
		return 0, err
	}
	size += sizeB
	return size, nil
}

// encode from github.com/shamaton/msgpackgen/internal/tst.A
func ___encodeArrayA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v A, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(3, offset)
	offset = encoder.WriteInt(v.Int, offset)
	offset = encoder.WriteUint(v.Uint, offset)
	_, offset, err = ___encodeArrayB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v.B, encoder, offset)
	if err != nil {
		return nil, 0, err
	}
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/shamaton/msgpackgen/internal/tst.A
func ___encodeMapA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v A, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(3, offset)
	offset = encoder.WriteStringFix("Int", 3, offset)
	offset = encoder.WriteInt(v.Int, offset)
	offset = encoder.WriteStringFix("Uint", 4, offset)
	offset = encoder.WriteUint(v.Uint, offset)
	offset = encoder.WriteStringFix("B", 1, offset)
	_, offset, err = ___encodeMapB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v.B, encoder, offset)
	if err != nil {
		return nil, 0, err
	}
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/shamaton/msgpackgen/internal/tst.A
func ___decodeArrayA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v *A, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(3, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv int
		vv, offset, err = decoder.AsInt(offset)
		if err != nil {
			return 0, err
		}
		v.Int = vv
	}
	{
		var vv uint
		vv, offset, err = decoder.AsUint(offset)
		if err != nil {
			return 0, err
		}
		v.Uint = vv
	}
	{
		var vv tst.B
		offset, err = ___decodeArrayB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(&vv, decoder, offset)
		if err != nil {
			return 0, err
		}
		v.B = vv
	}
	return offset, err
}

// decode to github.com/shamaton/msgpackgen/internal/tst.A
func ___decodeMapA_381938ea1d67bd485281248f049e79604e4b5ab3d916bc5595076e403d101293(v *A, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(3, 0)
	if err != nil {
		return 0, err
	}
	dataLen := decoder.Len()
	for offset < dataLen {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		case "Int":
			{
				var vv int
				vv, offset, err = decoder.AsInt(offset)
				if err != nil {
					return 0, err
				}
				v.Int = vv
			}
		case "Uint":
			{
				var vv uint
				vv, offset, err = decoder.AsUint(offset)
				if err != nil {
					return 0, err
				}
				v.Uint = vv
			}
		case "B":
			{
				var vv tst.B
				offset, err = ___decodeMapB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(&vv, decoder, offset)
				if err != nil {
					return 0, err
				}
				v.B = vv
			}
		default:
			offset = decoder.JumpOffset(offset)
		}
	}
	return offset, err
}

// calculate size from github.com/shamaton/msgpackgen/internal/tst/tst.B
func ___calcArraySizeB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v tst.B, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// calculate size from github.com/shamaton/msgpackgen/internal/tst/tst.B
func ___calcMapSizeB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v tst.B, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// encode from github.com/shamaton/msgpackgen/internal/tst/tst.B
func ___encodeArrayB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v tst.B, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/shamaton/msgpackgen/internal/tst/tst.B
func ___encodeMapB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v tst.B, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/shamaton/msgpackgen/internal/tst/tst.B
func ___decodeArrayB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v *tst.B, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	return offset, err
}

// decode to github.com/shamaton/msgpackgen/internal/tst/tst.B
func ___decodeMapB_c96b7f5b5d06c797145d5cf37d98e2637b55ecfc9c8ac448a0ebf9e70c0329dc(v *tst.B, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, 0)
	if err != nil {
		return 0, err
	}
	dataLen := decoder.Len()
	for offset < dataLen {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		default:
			offset = decoder.JumpOffset(offset)
		}
	}
	return offset, err
}
